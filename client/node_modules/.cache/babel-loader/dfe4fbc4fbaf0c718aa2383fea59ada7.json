{"ast":null,"code":"import { SET_CURRENT_USER } from \"./types\";\nimport axios from \"axios\";\n/* import jwt_decode from \"jwt-decode\" */\n//Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"http://localhost/5000/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    });\n  };\n}; //Login user\n\n/* export const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    //save to local storage\n    const { token } = res.data\n\n    //Set tokan to local storage\n    localStorage.setItem(\"jwtToken\", token)\n\n    //set tokan to Auth header\n    setAuthToken(token)\n    //decode token to get user data\n    const decoded = jwt_decode(token)\n\n    //set current user\n    dispatch(setCurrentUser(decoded))\n  })\n}\n\n//set current user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  }\n}\n\n//log user out\n\nexport const logOutUser = () => dispatch => {\n  //Remove tokon from local storage\n  localStorage.removeItem(\"jwtToken\")\n  //remove Auth header fro future request\n  setAuthToken(false)\n\n  // set the current user to empty user which will make authorization fasle\n  dispatch(setCurrentUser({}))\n} */","map":{"version":3,"sources":["/Users/anujthapa/Documents/fudo/fudo/client/src/redux/action/authAction.js"],"names":["SET_CURRENT_USER","axios","registerUser","userData","history","dispatch","post","then","res","push"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,SAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA;AAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DJ,IAAAA,KAAK,CACFK,IADH,CACQ,0CADR,EACoDH,QADpD,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX;AAGD,GAJ2B;AAAA,CAArB,C,CAMP;;AACA","sourcesContent":["import { SET_CURRENT_USER } from \"./types\"\nimport axios from \"axios\"\n/* import jwt_decode from \"jwt-decode\" */\n\n//Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"http://localhost/5000/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n}\n\n//Login user\n/* export const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    //save to local storage\n    const { token } = res.data\n\n    //Set tokan to local storage\n    localStorage.setItem(\"jwtToken\", token)\n\n    //set tokan to Auth header\n    setAuthToken(token)\n    //decode token to get user data\n    const decoded = jwt_decode(token)\n\n    //set current user\n    dispatch(setCurrentUser(decoded))\n  })\n}\n\n//set current user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  }\n}\n\n//log user out\n\nexport const logOutUser = () => dispatch => {\n  //Remove tokon from local storage\n  localStorage.removeItem(\"jwtToken\")\n  //remove Auth header fro future request\n  setAuthToken(false)\n\n  // set the current user to empty user which will make authorization fasle\n  dispatch(setCurrentUser({}))\n} */\n"]},"metadata":{},"sourceType":"module"}