{"ast":null,"code":"import { SET_CURRENT_USER } from \"./types\";\nimport setAuthToken from \"../utls/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport axios from \"axios\"; //Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //Login user\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post(\"/api/users/login\", userData).then(function (res) {\n      //save to local storage\n      var token = res.data.token; //Set tokan to local storage\n\n      localStorage.setItem(\"jwtToken\", token); //set tokan to Auth header\n\n      setAuthToken(token); //decode token to get user data\n\n      var decoded = jwt_decode(token); //set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //set current user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; //log user out\n\nexport var logOutUser = function logOutUser() {\n  return function (dispatch) {\n    //Remove tokon from local storage\n    localStorage.removeItem(\"jwtToken\"); //remove Auth header fro future request\n\n    setAuthToken(false); // set the current user to empty user which will make authorization fasle\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/Users/anujthapa/Documents/fudo/fudo/client/src/redux/action/authAction.js"],"names":["SET_CURRENT_USER","setAuthToken","jwt_decode","axios","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","GET_ERRORS","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logOutUser","removeItem"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,SAAjC;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DJ,IAAAA,KAAK,CACFK,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEC,UADC;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV2B;AAAA,CAArB,C,CAYP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAd,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC/CJ,IAAAA,KAAK,CACFK,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX;AADW,UAEHU,KAFG,GAEOV,GAAG,CAACQ,IAFX,CAEHE,KAFG,EAIX;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALW,CAOX;;AACAnB,MAAAA,YAAY,CAACmB,KAAD,CAAZ,CARW,CASX;;AACA,UAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAD,CAA1B,CAVW,CAYX;;AACAb,MAAAA,QAAQ,CAACiB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,KAhBH,EAiBGX,KAjBH,CAiBS,UAAAC,GAAG,EAAI;AACZN,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEC,UADC;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI,QAAJ,CAAaC;AAFf,OAAD,CAAR;AAID,KAtBH;AAuBD,GAxBgC;AAAA,CAA1B,C,CA0BP;;AAEA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLT,IAAAA,IAAI,EAAEd,gBADD;AAELgB,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAOP;;AAEA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAlB,QAAQ,EAAI;AAC1C;AACAc,IAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAzB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAM1C;;AACAM,IAAAA,QAAQ,CAACiB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GARyB;AAAA,CAAnB","sourcesContent":["import { SET_CURRENT_USER } from \"./types\"\nimport setAuthToken from \"../utls/setAuthToken\"\nimport jwt_decode from \"jwt-decode\"\nimport axios from \"axios\"\n\n//Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    )\n}\n\n//Login user\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      //save to local storage\n      const { token } = res.data\n\n      //Set tokan to local storage\n      localStorage.setItem(\"jwtToken\", token)\n\n      //set tokan to Auth header\n      setAuthToken(token)\n      //decode token to get user data\n      const decoded = jwt_decode(token)\n\n      //set current user\n      dispatch(setCurrentUser(decoded))\n    })\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n}\n\n//set current user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  }\n}\n\n//log user out\n\nexport const logOutUser = () => dispatch => {\n  //Remove tokon from local storage\n  localStorage.removeItem(\"jwtToken\")\n  //remove Auth header fro future request\n  setAuthToken(false)\n\n  // set the current user to empty user which will make authorization fasle\n  dispatch(setCurrentUser({}))\n}\n"]},"metadata":{},"sourceType":"module"}