{"ast":null,"code":"import { SET_CURRENT_USER } from \"./types\";\nimport axios from \"axios\";\nimport setAuthToken from \"../../components/utlis/setAuthToken\";\nimport jwt_decode from \"\";\n/* import jwt_decode from \"jwt-decode\" */\n//Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/signin\");\n    });\n  };\n}; //Login user\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post(\"/api/users/login\", userData).then(function (res) {\n      //save to local storage\n      var token = res.data.token; //Set tokan to local storage\n\n      localStorage.setItem(\"jwtToken\", token); //set tokan to Auth header\n\n      setAuthToken(token); //decode token to get user data\n\n      var decoded = jwt_decode(token); //set current user\n\n      dispatch(setCurrentUser(decoded));\n    });\n  };\n}; //set current user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; //log user out\n\nexport var logOutUser = function logOutUser() {\n  return function (dispatch) {\n    //Remove tokon from local storage\n    localStorage.removeItem(\"jwtToken\"); //remove Auth header fro future request\n\n    setAuthToken(false); // set the current user to empty user which will make authorization fasle\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/Users/anujthapa/Documents/fudo/fudo/client/src/redux/action/authAction.js"],"names":["SET_CURRENT_USER","axios","setAuthToken","jwt_decode","registerUser","userData","history","dispatch","post","then","res","push","loginUser","token","data","localStorage","setItem","decoded","setCurrentUser","type","payload","logOutUser","removeItem"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,SAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,UAAP,MAAuB,EAAvB;AACA;AAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DN,IAAAA,KAAK,CACFO,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,SAAb,CAAJ;AAAA,KAFX;AAGD,GAJ2B;AAAA,CAArB,C,CAMP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAP,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC/CN,IAAAA,KAAK,CAACO,IAAN,CAAW,kBAAX,EAA+BH,QAA/B,EAAyCI,IAAzC,CAA8C,UAAAC,GAAG,EAAI;AACnD;AADmD,UAE3CG,KAF2C,GAEjCH,GAAG,CAACI,IAF6B,CAE3CD,KAF2C,EAInD;;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EALmD,CAOnD;;AACAX,MAAAA,YAAY,CAACW,KAAD,CAAZ,CARmD,CASnD;;AACA,UAAMI,OAAO,GAAGd,UAAU,CAACU,KAAD,CAA1B,CAVmD,CAYnD;;AACAN,MAAAA,QAAQ,CAACW,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,KAdD;AAeD,GAhBgC;AAAA,CAA1B,C,CAkBP;;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLE,IAAAA,IAAI,EAAEnB,gBADD;AAELoB,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM,C,CAOP;;AAEA,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAd,QAAQ,EAAI;AAC1C;AACAQ,IAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACApB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAM1C;;AACAK,IAAAA,QAAQ,CAACW,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GARyB;AAAA,CAAnB","sourcesContent":["import { SET_CURRENT_USER } from \"./types\"\nimport axios from \"axios\"\nimport setAuthToken from \"../../components/utlis/setAuthToken\"\nimport jwt_decode from \"\"\n/* import jwt_decode from \"jwt-decode\" */\n\n//Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/signin\"))\n}\n\n//Login user\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    //save to local storage\n    const { token } = res.data\n\n    //Set tokan to local storage\n    localStorage.setItem(\"jwtToken\", token)\n\n    //set tokan to Auth header\n    setAuthToken(token)\n    //decode token to get user data\n    const decoded = jwt_decode(token)\n\n    //set current user\n    dispatch(setCurrentUser(decoded))\n  })\n}\n\n//set current user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  }\n}\n\n//log user out\n\nexport const logOutUser = () => dispatch => {\n  //Remove tokon from local storage\n  localStorage.removeItem(\"jwtToken\")\n  //remove Auth header fro future request\n  setAuthToken(false)\n\n  // set the current user to empty user which will make authorization fasle\n  dispatch(setCurrentUser({}))\n}\n"]},"metadata":{},"sourceType":"module"}